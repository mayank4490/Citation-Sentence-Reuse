import pickle
import sklearn

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics.pairwise import linear_kernel

import string
import re
import operator

cc1c2 = open('../cited_citer1_citer2_concatenated_cosine_similarity', 'r')
#file generated by reading cited_citer_dump_processed_v3 each entry and 
#reducing every citer cited pair's citation context to a single entry
#by space separated concatentaion of various instances of citation context

citedciter = open('../cited_citer_dump_processed_v3')

filein = open('../paper_title','r')
title = dict()    #dict of paper ID keyed to title if present in dataset

for line in filein:
	pap = re.findall('^([0-9]+)\t.+',line)
	tit = re.findall('^[0-9]+\t(.+)',line)
	title[pap[0]] = tit[0]

abstract = pickle.load(open('../paper_abtract.dict','rb'))  #dict of paper ID keyed to abstract for paper if present in dataset

num_cites = dict()

c1c2cit = dict()
max = 1.0;


for line in cc1c2:
	t = map(float, re.findall('.+ .+ .+ ([0-9.e\-]+) [A-Za-z]+', line))  #value of cosine similarity

	if t[0] ==  max:  #if cosine similarity is 1

		y =  re.findall('(.+) (.+) (.+) [0-9.e\-]+ [A-Za-z]+', line) #y is the cited , citer 1, citer2 tuple
		if c1c2cit.get((y[0][1], y[0][2])) is None:
			c1c2cit[(y[0][1], y[0][2])] = list()
		if not y[0][0] in c1c2cit[(y[0][1],y[0][2])]:
			c1c2cit[(y[0][1],y[0][2])].append(y[0][0])

need = c1c2cit


concept_of_time = open('../years_final.txt','r')
years = dict()

for line in concept_of_time:
        years[re.findall('([0-9]+):[0-9]+', line)[0]] = re.findall('[0-9]+:([0-9]+)', line)[0]
#string value paper ID and string value year

for line in need:

	if num_cites.get(line[0]) is None:
		num_cites[line[0]] = list()
	if num_cites.get(line[1]) is None:
                num_cites[line[1]] = list()
#	print line[1]
	for thing in need[line]:
		if not thing in num_cites[line[1]]:
 	               num_cites[line[1]].append(thing)
                if not thing in num_cites[line[0]]:
                       num_cites[line[0]].append(thing)


count = 0;


num_ref1 = dict()

for line in citedciter:	
	p = (str(re.findall('(^[0-9]+) [0-9]+ \S+', line))[2:-2], str(re.findall('^[0-9]+ ([0-9]+) \S+',line ))[2:-2])
#	p =  re.findall('(.+) (.+) (.+) [0-9.e\-]+ [A-Za-z]+', liner) #y is the cited , citer 1, citer2 tuple
#	print p
	count +=1
#	if count == 20:
#		break
	if p != ("",""):
		if num_ref1.get(p[1]) is None:
			num_ref1[p[1]] = list()
		if not p[0] in num_ref1[p[1]]:
			num_ref1[p[1]].append(p[0])

paper_percent = dict()

for paper in num_cites:
	#These are the papers which have their citation context
	#ditto copies of some other papers
	#the list is associated are all the references of the paper
	#for which the citation context is lifted from somewhere exactly
	if paper_percent.get(paper) is not None:
		print "Strange things are happening here :)"

	paper_percent[paper] = float(len(num_cites[paper]))/len(num_ref1[paper])


sorted_x = sorted(paper_percent.items(), key=operator.itemgetter(1), reverse=True)

co_copiers_regardless_of_year = dict()

for item in need:
	if co_copiers_regardless_of_year.get(item[0]) is None:
		co_copiers_regardless_of_year[item[0]] = list()
	if co_copiers_regardless_of_year.get(item[1]) is None:
		co_copiers_regardless_of_year[item[1]] = list()
	if not item[0] in co_copiers_regardless_of_year[item[1]]:
		co_copiers_regardless_of_year[item[1]].append(item[0])
	if not item[1] in co_copiers_regardless_of_year[item[0]]:
                co_copiers_regardless_of_year[item[0]].append(item[1]) 

count = 0
numberjns =0
heroes = dict()
for thing in sorted_x:
	#print thing
	count = count + 1
	#print len(num_ref1[thing[0]])
	if thing[1] >= 0.6 and len(num_ref1[thing[0]]) >= 5:
		numberjns+=1
		heroes[thing[0]] = co_copiers_regardless_of_year[thing[0]]	

peeps = heroes
#this is a dict which have paper value keyed to list of coparceners
#therefore it would make sense to check abstract similarity and title
#similarity of a paper and its coparceners




cc1c2.seek(0)
plagiarists = dict()
missing = list()
num_linkexists=0
num_no_link =0
count = 0
cited_same_year=0
debug =0 
degree = dict()


title_ball = list()
abstract_ball = list()

InOrder_title = sorted(title)
InOrder_abs = sorted(abstract)

#print InOrder_title

for item in InOrder_title:
	title_ball.append(title[item]) 
#title.seek(0)
for item in InOrder_abs:
	abstract_ball.append(abstract[item]) 
#abstract.seek(0)


sampleStopWords = ['CITATION','I','a','an','are','as','at','be','by','for','from','in','is','it','of','on','or','that','the','this','to','was','will','with']
tfidf_title = TfidfVectorizer(analyzer='word' , stop_words=sampleStopWords).fit_transform(title_ball)
tfidf_abstract = TfidfVectorizer(analyzer='word' , stop_words=sampleStopWords).fit_transform(abstract_ball)

abstractvec = dict()
titlevec = dict()

for item, vectemp in zip(InOrder_title, tfidf_title):
        titlevec[item] = (vectemp)

for item, vectemp in zip(InOrder_abs, tfidf_abstract):
        abstractvec[item] = (vectemp)

#peeps.seek(0)

mx_copy_avg_tit = 0
count_tit = 0
count_abs = 0
mx_copy_tit = 0
mx_copy_abs = 0
mx_copy_avg_abs = 0
avg_tit = 0
avg_tit = 0
total = 0
high_tit = 0
low_tit = 0
high_abs = 0
low_abs = 0
sum_tit = 0
sum_abs = 0
percent_tot_tit = 0
percent_tot_abs = 0

for person in peeps:
	total+=1
	mx_copy_tit = 0
	mx_copy_abs = 0
	for coparce in peeps[person]:
		#title
		if not titlevec.get(coparce) is None and not titlevec.get(person) is None:
			sim = cosine_similarity(titlevec[coparce], titlevec[person])
			sum_tit += sim
			percent_tot_tit+=1
			if sim >=0.8:
				high_tit +=1
			if sim <= 0.2:
				low_tit +=1
			if mx_copy_tit < sim:
				mx_copy_tit = sim
		#abstract
		if not abstractvec.get(coparce) is None and not abstractvec.get(person) is None:
                        sim = cosine_similarity(abstractvec[coparce], abstractvec[person])
			sum_abs += sim
			percent_tot_abs+=1
			if sim >=0.8:
                                high_abs +=1
                        if sim <= 0.2:
                                low_abs	+=1
			if mx_copy_abs < sim:
				mx_copy_abs = sim
	if mx_copy_tit > 0:
		count_tit +=1
		mx_copy_avg_tit += mx_copy_tit
		
	if mx_copy_abs > 0:
		count_abs+=1
		mx_copy_avg_abs += mx_copy_abs

print "The number of papers with 5 or more citations and >= 60% if them ditto copied from elsewhere are ", numberjns
print "The average maximal value of title similarity is ", float(mx_copy_avg_tit)/count_tit
print mx_copy_avg_tit, count_tit
print "The average maximal value of abstract similarity is ", float(mx_copy_avg_abs)/count_abs
print mx_copy_avg_abs, count_abs
print "% Cases where similarity of titles is high is", float(high_tit)/percent_tot_tit
print "% Cases where similarity of titles is low is", float(low_tit)/percent_tot_tit
print "% Cases where similarity of abstracts is high is", float(high_abs)/percent_tot_abs
print "% Cases where similarity of abstracts is low is", float(low_abs)/percent_tot_abs
print "The average value of title similarity is ", float(sum_tit)/percent_tot_tit
print "The average value of abstract similarity is ", float(sum_abs)/percent_tot_abs
print sum_tit, percent_tot_tit, sum_abs, percent_tot_abs
print "Length of the tfidf vector for title is", len(titlevec)
print "Length of tfidf vector for the abstract is", len(abstractvec)
